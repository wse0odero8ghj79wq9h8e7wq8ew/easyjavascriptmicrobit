<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="TN9Iq@[p,P8lu3$j!QP^">canaddhealthvar</variable></variables><block type="pxt-on-start" id="ncgN_sLxRaN-@PKu`VGa" x="0" y="0"><statement name="HANDLER"><block type="variables_set" id="DS(o}-h)`KOhg0ebtM(Z"><field name="VAR" id="TN9Iq@[p,P8lu3$j!QP^">canaddhealthvar</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="YjsY!:*{Dye?CKQXf%!["><field name="BOOL">TRUE</field></block></value><next><block type="typescript_statement" id="52KRI(.wTwW-(?eDQbZZ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace easyScript {" line1="    /**" line2="     * Prints whatever is inside of it on the microbit." line3="     */" line4="    //% blockId=easyprint" line5="    //% block=&quot;print $str&quot;" line6="    export function print(str : string): void {" line7="        basic.showString(str)" line8="    }" line9="    /**" line10="     * Waits for an amount of time in seconds." line11="     */" line12="    //% blockId=easywait" line13="    //% block=&quot;wait $time&quot;" line14="    export function wait(time : number): void {" line15="        basic.pause(time*1000)" line16="    }" line17="    /**" line18="     * Clears the screen." line19="     */" line20="    //% blockId=easyclear" line21="    //% block=&quot;clear&quot;" line22="    export function clear(): void {" line23="        basic.clearScreen()" line24="    }" line25="    /**" line26="     * Adds _health variable." line27="     */" line28="    //% blockId=easyhealth" line29="    //% block=&quot;varhealth&quot;" line30="    export function varhealth(): void {" line31="        if (canaddhealthvar == true){" line32="           let _health = 100" line33="           canaddhealthvar = false" line34="        } else {" line35="            let _health2 = 100" line36="        }" line37="    }" line38="    /**" line39="     * Lights a random tile." line40="     */" line41="    //% blockId=&quot;specialrandomtile&quot;" line42="    //% block=&quot;light random tile&quot;" line43="    export function randomtile(): void {" line44="        let randx = randint(0, 4)" line45="        let randy = randint(0, 4)" line46="        led.plot(randx, randy)" line47="    }" line48="    /**" line49="     * Lights a random tile with random transparency." line50="     */" line51="    //% blockId=&quot;specialrandomtiletransparency&quot;" line52="    //% block=&quot;light random transparency tile&quot;" line53="    export function randomtiletransparency(): void {" line54="        let randx2 = randint(0, 4)" line55="        let randy2 = randint(0, 4)" line56="        let randbright = randint(0, 255)" line57="        led.plotBrightness(randx2, randy2, randbright)" line58="    }" line59="    /**" line60="     * Prints a factorial." line61="     */" line62="    //% blockId=&quot;specialfactorial&quot;" line63="    //% block=&quot;factorial $num $factorialnumber&quot;" line64="    export function factorial(num: number) {" line65="        let multiply = num" line66="        let answer = 0" line67="        if (num &lt;= -1) {" line68="            return 0;" line69="        }" line70="        if (num == 0 || num == 1) {" line71="            return 1;" line72="        }" line73="        answer = num" line74="        while (multiply &gt;= 3) {" line75="            multiply = multiply - 1" line76="            answer = answer * multiply" line77="        }" line78="        return answer;" line79="    }" line80="    " line81="}" numlines="82"></mutation></block></next></block></statement></block></xml>